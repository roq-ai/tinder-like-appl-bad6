generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model activity {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String    @db.Uuid
  activity_type String?   @db.VarChar(255)
  activity_date DateTime? @db.Timestamp(6)
  description   String?   @db.VarChar(255)
  location      String?   @db.VarChar(255)
  status        String?   @db.VarChar(255)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @default(now()) @db.Timestamp(6)
  user          user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?   @db.VarChar(255)
  founded_date DateTime? @db.Timestamp(6)
  address      String?   @db.VarChar(255)
  city         String?   @db.VarChar(255)
  country      String?   @db.VarChar(255)
  name         String    @db.VarChar(255)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  user_id      String    @db.Uuid
  tenant_id    String    @db.VarChar(255)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model interest {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  category    String?  @db.VarChar(255)
  popularity  Int?
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model match {
  id                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user1_id                  String    @db.Uuid
  user2_id                  String    @db.Uuid
  match_date                DateTime? @db.Timestamp(6)
  match_score               Int?
  status                    String?   @db.VarChar(255)
  created_at                DateTime  @default(now()) @db.Timestamp(6)
  updated_at                DateTime  @default(now()) @db.Timestamp(6)
  user_match_user1_idTouser user      @relation("match_user1_idTouser", fields: [user1_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_match_user2_idTouser user      @relation("match_user2_idTouser", fields: [user2_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profile {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  bio         String?   @db.VarChar(255)
  gender      String?   @db.VarChar(255)
  preference  String?   @db.VarChar(255)
  location    String?   @db.VarChar(255)
  last_active DateTime? @db.Timestamp(6)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                      String     @unique @db.VarChar(255)
  firstName                  String?    @db.VarChar(255)
  lastName                   String?    @db.VarChar(255)
  roq_user_id                String     @db.VarChar(255)
  tenant_id                  String     @db.VarChar(255)
  created_at                 DateTime   @default(now()) @db.Timestamp(6)
  updated_at                 DateTime   @default(now()) @db.Timestamp(6)
  activity                   activity[]
  company                    company[]
  interest                   interest[]
  match_match_user1_idTouser match[]    @relation("match_user1_idTouser")
  match_match_user2_idTouser match[]    @relation("match_user2_idTouser")
  profile                    profile[]
}
